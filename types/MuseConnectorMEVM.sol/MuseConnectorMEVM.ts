/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MuseInterfaces {
  export type SendInputStruct = {
    destinationChainId: BigNumberish;
    destinationAddress: BytesLike;
    destinationGasLimit: BigNumberish;
    message: BytesLike;
    museValueAndGas: BigNumberish;
    museParams: BytesLike;
  };

  export type SendInputStructOutput = [
    destinationChainId: bigint,
    destinationAddress: string,
    destinationGasLimit: bigint,
    message: string,
    museValueAndGas: bigint,
    museParams: string
  ] & {
    destinationChainId: bigint;
    destinationAddress: string;
    destinationGasLimit: bigint;
    message: string;
    museValueAndGas: bigint;
    museParams: string;
  };
}

export interface MuseConnectorMEVMInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FUNGIBLE_MODULE_ADDRESS"
      | "onReceive"
      | "onRevert"
      | "send"
      | "setWmuseAddress"
      | "wmuse"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MuseReceived"
      | "MuseReverted"
      | "MuseSent"
      | "SetWMUSE"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FUNGIBLE_MODULE_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onReceive",
    values: [
      BytesLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onRevert",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [MuseInterfaces.SendInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setWmuseAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "wmuse", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "FUNGIBLE_MODULE_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onRevert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWmuseAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wmuse", data: BytesLike): Result;
}

export namespace MuseReceivedEvent {
  export type InputTuple = [
    museTxSenderAddress: BytesLike,
    sourceChainId: BigNumberish,
    destinationAddress: AddressLike,
    museValue: BigNumberish,
    message: BytesLike,
    internalSendHash: BytesLike
  ];
  export type OutputTuple = [
    museTxSenderAddress: string,
    sourceChainId: bigint,
    destinationAddress: string,
    museValue: bigint,
    message: string,
    internalSendHash: string
  ];
  export interface OutputObject {
    museTxSenderAddress: string;
    sourceChainId: bigint;
    destinationAddress: string;
    museValue: bigint;
    message: string;
    internalSendHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MuseRevertedEvent {
  export type InputTuple = [
    museTxSenderAddress: AddressLike,
    sourceChainId: BigNumberish,
    destinationChainId: BigNumberish,
    destinationAddress: BytesLike,
    remainingMuseValue: BigNumberish,
    message: BytesLike,
    internalSendHash: BytesLike
  ];
  export type OutputTuple = [
    museTxSenderAddress: string,
    sourceChainId: bigint,
    destinationChainId: bigint,
    destinationAddress: string,
    remainingMuseValue: bigint,
    message: string,
    internalSendHash: string
  ];
  export interface OutputObject {
    museTxSenderAddress: string;
    sourceChainId: bigint;
    destinationChainId: bigint;
    destinationAddress: string;
    remainingMuseValue: bigint;
    message: string;
    internalSendHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MuseSentEvent {
  export type InputTuple = [
    sourceTxOriginAddress: AddressLike,
    museTxSenderAddress: AddressLike,
    destinationChainId: BigNumberish,
    destinationAddress: BytesLike,
    museValueAndGas: BigNumberish,
    destinationGasLimit: BigNumberish,
    message: BytesLike,
    museParams: BytesLike
  ];
  export type OutputTuple = [
    sourceTxOriginAddress: string,
    museTxSenderAddress: string,
    destinationChainId: bigint,
    destinationAddress: string,
    museValueAndGas: bigint,
    destinationGasLimit: bigint,
    message: string,
    museParams: string
  ];
  export interface OutputObject {
    sourceTxOriginAddress: string;
    museTxSenderAddress: string;
    destinationChainId: bigint;
    destinationAddress: string;
    museValueAndGas: bigint;
    destinationGasLimit: bigint;
    message: string;
    museParams: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWMUSEEvent {
  export type InputTuple = [wmuse_: AddressLike];
  export type OutputTuple = [wmuse_: string];
  export interface OutputObject {
    wmuse_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MuseConnectorMEVM extends BaseContract {
  connect(runner?: ContractRunner | null): MuseConnectorMEVM;
  waitForDeployment(): Promise<this>;

  interface: MuseConnectorMEVMInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FUNGIBLE_MODULE_ADDRESS: TypedContractMethod<[], [string], "view">;

  onReceive: TypedContractMethod<
    [
      museTxSenderAddress: BytesLike,
      sourceChainId: BigNumberish,
      destinationAddress: AddressLike,
      museValue: BigNumberish,
      message: BytesLike,
      internalSendHash: BytesLike
    ],
    [void],
    "payable"
  >;

  onRevert: TypedContractMethod<
    [
      museTxSenderAddress: AddressLike,
      sourceChainId: BigNumberish,
      destinationAddress: BytesLike,
      destinationChainId: BigNumberish,
      remainingMuseValue: BigNumberish,
      message: BytesLike,
      internalSendHash: BytesLike
    ],
    [void],
    "payable"
  >;

  send: TypedContractMethod<
    [input: MuseInterfaces.SendInputStruct],
    [void],
    "nonpayable"
  >;

  setWmuseAddress: TypedContractMethod<
    [wmuse_: AddressLike],
    [void],
    "nonpayable"
  >;

  wmuse: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FUNGIBLE_MODULE_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onReceive"
  ): TypedContractMethod<
    [
      museTxSenderAddress: BytesLike,
      sourceChainId: BigNumberish,
      destinationAddress: AddressLike,
      museValue: BigNumberish,
      message: BytesLike,
      internalSendHash: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "onRevert"
  ): TypedContractMethod<
    [
      museTxSenderAddress: AddressLike,
      sourceChainId: BigNumberish,
      destinationAddress: BytesLike,
      destinationChainId: BigNumberish,
      remainingMuseValue: BigNumberish,
      message: BytesLike,
      internalSendHash: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [input: MuseInterfaces.SendInputStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWmuseAddress"
  ): TypedContractMethod<[wmuse_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "wmuse"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "MuseReceived"
  ): TypedContractEvent<
    MuseReceivedEvent.InputTuple,
    MuseReceivedEvent.OutputTuple,
    MuseReceivedEvent.OutputObject
  >;
  getEvent(
    key: "MuseReverted"
  ): TypedContractEvent<
    MuseRevertedEvent.InputTuple,
    MuseRevertedEvent.OutputTuple,
    MuseRevertedEvent.OutputObject
  >;
  getEvent(
    key: "MuseSent"
  ): TypedContractEvent<
    MuseSentEvent.InputTuple,
    MuseSentEvent.OutputTuple,
    MuseSentEvent.OutputObject
  >;
  getEvent(
    key: "SetWMUSE"
  ): TypedContractEvent<
    SetWMUSEEvent.InputTuple,
    SetWMUSEEvent.OutputTuple,
    SetWMUSEEvent.OutputObject
  >;

  filters: {
    "MuseReceived(bytes,uint256,address,uint256,bytes,bytes32)": TypedContractEvent<
      MuseReceivedEvent.InputTuple,
      MuseReceivedEvent.OutputTuple,
      MuseReceivedEvent.OutputObject
    >;
    MuseReceived: TypedContractEvent<
      MuseReceivedEvent.InputTuple,
      MuseReceivedEvent.OutputTuple,
      MuseReceivedEvent.OutputObject
    >;

    "MuseReverted(address,uint256,uint256,bytes,uint256,bytes,bytes32)": TypedContractEvent<
      MuseRevertedEvent.InputTuple,
      MuseRevertedEvent.OutputTuple,
      MuseRevertedEvent.OutputObject
    >;
    MuseReverted: TypedContractEvent<
      MuseRevertedEvent.InputTuple,
      MuseRevertedEvent.OutputTuple,
      MuseRevertedEvent.OutputObject
    >;

    "MuseSent(address,address,uint256,bytes,uint256,uint256,bytes,bytes)": TypedContractEvent<
      MuseSentEvent.InputTuple,
      MuseSentEvent.OutputTuple,
      MuseSentEvent.OutputObject
    >;
    MuseSent: TypedContractEvent<
      MuseSentEvent.InputTuple,
      MuseSentEvent.OutputTuple,
      MuseSentEvent.OutputObject
    >;

    "SetWMUSE(address)": TypedContractEvent<
      SetWMUSEEvent.InputTuple,
      SetWMUSEEvent.OutputTuple,
      SetWMUSEEvent.OutputObject
    >;
    SetWMUSE: TypedContractEvent<
      SetWMUSEEvent.InputTuple,
      SetWMUSEEvent.OutputTuple,
      SetWMUSEEvent.OutputObject
    >;
  };
}
