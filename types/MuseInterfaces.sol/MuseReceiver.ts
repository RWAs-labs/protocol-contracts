/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MuseInterfaces {
  export type MuseMessageStruct = {
    museTxSenderAddress: BytesLike;
    sourceChainId: BigNumberish;
    destinationAddress: AddressLike;
    museValue: BigNumberish;
    message: BytesLike;
  };

  export type MuseMessageStructOutput = [
    museTxSenderAddress: string,
    sourceChainId: bigint,
    destinationAddress: string,
    museValue: bigint,
    message: string
  ] & {
    museTxSenderAddress: string;
    sourceChainId: bigint;
    destinationAddress: string;
    museValue: bigint;
    message: string;
  };

  export type MuseRevertStruct = {
    museTxSenderAddress: AddressLike;
    sourceChainId: BigNumberish;
    destinationAddress: BytesLike;
    destinationChainId: BigNumberish;
    remainingMuseValue: BigNumberish;
    message: BytesLike;
  };

  export type MuseRevertStructOutput = [
    museTxSenderAddress: string,
    sourceChainId: bigint,
    destinationAddress: string,
    destinationChainId: bigint,
    remainingMuseValue: bigint,
    message: string
  ] & {
    museTxSenderAddress: string;
    sourceChainId: bigint;
    destinationAddress: string;
    destinationChainId: bigint;
    remainingMuseValue: bigint;
    message: string;
  };
}

export interface MuseReceiverInterface extends Interface {
  getFunction(
    nameOrSignature: "onMuseMessage" | "onMuseRevert"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "onMuseMessage",
    values: [MuseInterfaces.MuseMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onMuseRevert",
    values: [MuseInterfaces.MuseRevertStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "onMuseMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onMuseRevert",
    data: BytesLike
  ): Result;
}

export interface MuseReceiver extends BaseContract {
  connect(runner?: ContractRunner | null): MuseReceiver;
  waitForDeployment(): Promise<this>;

  interface: MuseReceiverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  onMuseMessage: TypedContractMethod<
    [museMessage: MuseInterfaces.MuseMessageStruct],
    [void],
    "nonpayable"
  >;

  onMuseRevert: TypedContractMethod<
    [museRevert: MuseInterfaces.MuseRevertStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "onMuseMessage"
  ): TypedContractMethod<
    [museMessage: MuseInterfaces.MuseMessageStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onMuseRevert"
  ): TypedContractMethod<
    [museRevert: MuseInterfaces.MuseRevertStruct],
    [void],
    "nonpayable"
  >;

  filters: {};
}
