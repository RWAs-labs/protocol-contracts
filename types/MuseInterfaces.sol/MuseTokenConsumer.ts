/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MuseTokenConsumerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getEthFromMuse"
      | "getTokenFromMuse"
      | "getMuseFromEth"
      | "getMuseFromToken"
      | "hasMuseLiquidity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EthExchangedForMuse"
      | "TokenExchangedForMuse"
      | "MuseExchangedForEth"
      | "MuseExchangedForToken"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getEthFromMuse",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenFromMuse",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMuseFromEth",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMuseFromToken",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMuseLiquidity",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getEthFromMuse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenFromMuse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMuseFromEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMuseFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMuseLiquidity",
    data: BytesLike
  ): Result;
}

export namespace EthExchangedForMuseEvent {
  export type InputTuple = [amountIn: BigNumberish, amountOut: BigNumberish];
  export type OutputTuple = [amountIn: bigint, amountOut: bigint];
  export interface OutputObject {
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenExchangedForMuseEvent {
  export type InputTuple = [
    token: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    token: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MuseExchangedForEthEvent {
  export type InputTuple = [amountIn: BigNumberish, amountOut: BigNumberish];
  export type OutputTuple = [amountIn: bigint, amountOut: bigint];
  export interface OutputObject {
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MuseExchangedForTokenEvent {
  export type InputTuple = [
    token: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    token: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MuseTokenConsumer extends BaseContract {
  connect(runner?: ContractRunner | null): MuseTokenConsumer;
  waitForDeployment(): Promise<this>;

  interface: MuseTokenConsumerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getEthFromMuse: TypedContractMethod<
    [
      destinationAddress: AddressLike,
      minAmountOut: BigNumberish,
      museTokenAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getTokenFromMuse: TypedContractMethod<
    [
      destinationAddress: AddressLike,
      minAmountOut: BigNumberish,
      outputToken: AddressLike,
      museTokenAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getMuseFromEth: TypedContractMethod<
    [destinationAddress: AddressLike, minAmountOut: BigNumberish],
    [bigint],
    "payable"
  >;

  getMuseFromToken: TypedContractMethod<
    [
      destinationAddress: AddressLike,
      minAmountOut: BigNumberish,
      inputToken: AddressLike,
      inputTokenAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  hasMuseLiquidity: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getEthFromMuse"
  ): TypedContractMethod<
    [
      destinationAddress: AddressLike,
      minAmountOut: BigNumberish,
      museTokenAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTokenFromMuse"
  ): TypedContractMethod<
    [
      destinationAddress: AddressLike,
      minAmountOut: BigNumberish,
      outputToken: AddressLike,
      museTokenAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMuseFromEth"
  ): TypedContractMethod<
    [destinationAddress: AddressLike, minAmountOut: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getMuseFromToken"
  ): TypedContractMethod<
    [
      destinationAddress: AddressLike,
      minAmountOut: BigNumberish,
      inputToken: AddressLike,
      inputTokenAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasMuseLiquidity"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "EthExchangedForMuse"
  ): TypedContractEvent<
    EthExchangedForMuseEvent.InputTuple,
    EthExchangedForMuseEvent.OutputTuple,
    EthExchangedForMuseEvent.OutputObject
  >;
  getEvent(
    key: "TokenExchangedForMuse"
  ): TypedContractEvent<
    TokenExchangedForMuseEvent.InputTuple,
    TokenExchangedForMuseEvent.OutputTuple,
    TokenExchangedForMuseEvent.OutputObject
  >;
  getEvent(
    key: "MuseExchangedForEth"
  ): TypedContractEvent<
    MuseExchangedForEthEvent.InputTuple,
    MuseExchangedForEthEvent.OutputTuple,
    MuseExchangedForEthEvent.OutputObject
  >;
  getEvent(
    key: "MuseExchangedForToken"
  ): TypedContractEvent<
    MuseExchangedForTokenEvent.InputTuple,
    MuseExchangedForTokenEvent.OutputTuple,
    MuseExchangedForTokenEvent.OutputObject
  >;

  filters: {
    "EthExchangedForMuse(uint256,uint256)": TypedContractEvent<
      EthExchangedForMuseEvent.InputTuple,
      EthExchangedForMuseEvent.OutputTuple,
      EthExchangedForMuseEvent.OutputObject
    >;
    EthExchangedForMuse: TypedContractEvent<
      EthExchangedForMuseEvent.InputTuple,
      EthExchangedForMuseEvent.OutputTuple,
      EthExchangedForMuseEvent.OutputObject
    >;

    "TokenExchangedForMuse(address,uint256,uint256)": TypedContractEvent<
      TokenExchangedForMuseEvent.InputTuple,
      TokenExchangedForMuseEvent.OutputTuple,
      TokenExchangedForMuseEvent.OutputObject
    >;
    TokenExchangedForMuse: TypedContractEvent<
      TokenExchangedForMuseEvent.InputTuple,
      TokenExchangedForMuseEvent.OutputTuple,
      TokenExchangedForMuseEvent.OutputObject
    >;

    "MuseExchangedForEth(uint256,uint256)": TypedContractEvent<
      MuseExchangedForEthEvent.InputTuple,
      MuseExchangedForEthEvent.OutputTuple,
      MuseExchangedForEthEvent.OutputObject
    >;
    MuseExchangedForEth: TypedContractEvent<
      MuseExchangedForEthEvent.InputTuple,
      MuseExchangedForEthEvent.OutputTuple,
      MuseExchangedForEthEvent.OutputObject
    >;

    "MuseExchangedForToken(address,uint256,uint256)": TypedContractEvent<
      MuseExchangedForTokenEvent.InputTuple,
      MuseExchangedForTokenEvent.OutputTuple,
      MuseExchangedForTokenEvent.OutputObject
    >;
    MuseExchangedForToken: TypedContractEvent<
      MuseExchangedForTokenEvent.InputTuple,
      MuseExchangedForTokenEvent.OutputTuple,
      MuseExchangedForTokenEvent.OutputObject
    >;
  };
}
