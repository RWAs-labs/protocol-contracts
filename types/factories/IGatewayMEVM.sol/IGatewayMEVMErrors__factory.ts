/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IGatewayMEVMErrors,
  IGatewayMEVMErrorsInterface,
} from "../../IGatewayMEVM.sol/IGatewayMEVMErrors";

const _abi = [
  {
    type: "error",
    name: "CallerIsNotProtocol",
    inputs: [],
  },
  {
    type: "error",
    name: "FailedMuseSent",
    inputs: [
      {
        name: "recipient",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "GasFeeTransferFailed",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InsufficientGasLimit",
    inputs: [],
  },
  {
    type: "error",
    name: "InsufficientMRC20Amount",
    inputs: [],
  },
  {
    type: "error",
    name: "InsufficientMuseAmount",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidTarget",
    inputs: [],
  },
  {
    type: "error",
    name: "MessageSizeExceeded",
    inputs: [
      {
        name: "provided",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "maximum",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "OnlyWMUSEOrProtocol",
    inputs: [],
  },
  {
    type: "error",
    name: "WithdrawalFailed",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
      {
        name: "recipient",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "MRC20BurnFailed",
    inputs: [
      {
        name: "mrc20",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "MRC20DepositFailed",
    inputs: [
      {
        name: "mrc20",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "MRC20TransferFailed",
    inputs: [
      {
        name: "mrc20",
        type: "address",
        internalType: "address",
      },
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
] as const;

export class IGatewayMEVMErrors__factory {
  static readonly abi = _abi;
  static createInterface(): IGatewayMEVMErrorsInterface {
    return new Interface(_abi) as IGatewayMEVMErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IGatewayMEVMErrors {
    return new Contract(address, _abi, runner) as unknown as IGatewayMEVMErrors;
  }
}
