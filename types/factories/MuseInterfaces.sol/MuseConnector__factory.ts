/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  MuseConnector,
  MuseConnectorInterface,
} from "../../MuseInterfaces.sol/MuseConnector";

const _abi = [
  {
    type: "function",
    name: "send",
    inputs: [
      {
        name: "input",
        type: "tuple",
        internalType: "struct MuseInterfaces.sol.SendInput",
        components: [
          {
            name: "destinationChainId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "destinationAddress",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "destinationGasLimit",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "message",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "museValueAndGas",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "museParams",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const;

export class MuseConnector__factory {
  static readonly abi = _abi;
  static createInterface(): MuseConnectorInterface {
    return new Interface(_abi) as MuseConnectorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MuseConnector {
    return new Contract(address, _abi, runner) as unknown as MuseConnector;
  }
}
